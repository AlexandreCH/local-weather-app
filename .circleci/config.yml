version: 2.1
orbs:
  gcp-cloud-run: circleci/gcp-cloud-run@1.0.2
jobs:
  build:
    docker:
      - image: circleci/node:lts-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm ci

      # force update the webdriver, so it runs with latest version of Chrome
      - run: cd ./node_modules/protractor && npm i webdriver-manager@latest

      # because we use "npm ci" to install NPM dependencies
      # we cache "~/.npm" folder
      - save_cache:
          paths:
            - ~/.npm
          key: v1-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run style
      - run: npm run lint

      - run: npm run build:prod
      - run: npm run test
      - run: npm run e2e

      - store_test_results:
          path: ./test_results

      - run:
          name: Tar & Gzip compiled app
          command: tar zcf dist.tar.gz dist/local-weather-app
      - store_artifacts:
          path: dist.tar.gz

      - run:
          name: Move compiled app to workspace
          command: |
            set -exu
            mkdir -p /tmp/workspace/dist
            mv dist/local-weather-app /tmp/workspace/dist/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - dist/local-weather-app
  deploy_cloudrun:
    docker:
      - image: 'cimg/base:stable'
    steps:
      working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Copy built app to dist folder
          command: cp -R /tmp/workspace/dist/local-weather-app dist/
      - cloudrun/init
      - cloudrun/build:
          tag: 'gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}'
      - cloudrun/deploy:
          image: 'gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}'
          platform: managed
          region: us-east1
          service-name: localcast-weather
          unauthenticated: true
      - run:
          command: >
            # A simple example of how a deployed managed service could be
            verified or further tested.

            # This step will send request our "API" and fail if there is
            unexpected output.

            GCP_API_RESULTS=$(curl -s "$GCP_DEPLOY_ENDPOINT")

            if [ "$GCP_API_RESULTS" != "Hello World!" ]; then
              echo "Result is unexpected"
              echo 'Result: '
              curl -s "$GCP_DEPLOY_ENDPOINT"
              exit 1;
            fi
          name: Test managed deployed service.
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - deploy_cloudrun:
          requires:
            - build
